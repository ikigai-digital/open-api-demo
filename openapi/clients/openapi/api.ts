/* tslint:disable */
/* eslint-disable */
/**
 * Simple Inventory API
 * This is a simple API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InventoryItem
 */
export interface InventoryItem {
    /**
     * 
     * @type {string}
     * @memberof InventoryItem
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof InventoryItem
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof InventoryItem
     */
    'releaseDate': string;
    /**
     * 
     * @type {Manufacturer}
     * @memberof InventoryItem
     */
    'manufacturer': Manufacturer;
}
/**
 * 
 * @export
 * @interface Manufacturer
 */
export interface Manufacturer {
    /**
     * 
     * @type {string}
     * @memberof Manufacturer
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Manufacturer
     */
    'homePage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manufacturer
     */
    'phone'?: string;
}

/**
 * AdminsApi - axios parameter creator
 * @export
 */
export const AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds an item to the system
         * @summary adds an inventory item
         * @param {InventoryItem} [inventoryItem] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventory: async (inventoryItem?: InventoryItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inventoryItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminsApi - functional programming interface
 * @export
 */
export const AdminsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds an item to the system
         * @summary adds an inventory item
         * @param {InventoryItem} [inventoryItem] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addInventory(inventoryItem?: InventoryItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addInventory(inventoryItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminsApi - factory interface
 * @export
 */
export const AdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminsApiFp(configuration)
    return {
        /**
         * Adds an item to the system
         * @summary adds an inventory item
         * @param {InventoryItem} [inventoryItem] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventory(inventoryItem?: InventoryItem, options?: any): AxiosPromise<void> {
            return localVarFp.addInventory(inventoryItem, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminsApi - interface
 * @export
 * @interface AdminsApi
 */
export interface AdminsApiInterface {
    /**
     * Adds an item to the system
     * @summary adds an inventory item
     * @param {InventoryItem} [inventoryItem] Inventory item to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApiInterface
     */
    addInventory(inventoryItem?: InventoryItem, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * AdminsApi - object-oriented interface
 * @export
 * @class AdminsApi
 * @extends {BaseAPI}
 */
export class AdminsApi extends BaseAPI implements AdminsApiInterface {
    /**
     * Adds an item to the system
     * @summary adds an inventory item
     * @param {InventoryItem} [inventoryItem] Inventory item to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public addInventory(inventoryItem?: InventoryItem, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).addInventory(inventoryItem, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DevelopersApi - axios parameter creator
 * @export
 */
export const DevelopersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary searches inventory
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInventory: async (searchString?: string, skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevelopersApi - functional programming interface
 * @export
 */
export const DevelopersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevelopersApiAxiosParamCreator(configuration)
    return {
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary searches inventory
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchInventory(searchString?: string, skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchInventory(searchString, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevelopersApi - factory interface
 * @export
 */
export const DevelopersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevelopersApiFp(configuration)
    return {
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary searches inventory
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInventory(searchString?: string, skip?: number, limit?: number, options?: any): AxiosPromise<Array<InventoryItem>> {
            return localVarFp.searchInventory(searchString, skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevelopersApi - interface
 * @export
 * @interface DevelopersApi
 */
export interface DevelopersApiInterface {
    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @summary searches inventory
     * @param {string} [searchString] pass an optional search string for looking up inventory
     * @param {number} [skip] number of records to skip for pagination
     * @param {number} [limit] maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopersApiInterface
     */
    searchInventory(searchString?: string, skip?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<Array<InventoryItem>>;

}

/**
 * DevelopersApi - object-oriented interface
 * @export
 * @class DevelopersApi
 * @extends {BaseAPI}
 */
export class DevelopersApi extends BaseAPI implements DevelopersApiInterface {
    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @summary searches inventory
     * @param {string} [searchString] pass an optional search string for looking up inventory
     * @param {number} [skip] number of records to skip for pagination
     * @param {number} [limit] maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopersApi
     */
    public searchInventory(searchString?: string, skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return DevelopersApiFp(this.configuration).searchInventory(searchString, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


